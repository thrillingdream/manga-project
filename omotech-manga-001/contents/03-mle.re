= 機械学習工学

//abstract{
  第3章では「機械学習工学」を題材にしています。
  機械学習工学は、機械学習を実際のシステムに組み込むための技術や手法を指します。なんでもできると思われがちな機械学習ですが、実際のシステムに組み込むためには、様々な課題があります。
  今回では、近頃流行っている機械学習 ≒ AIから一歩引いて運用面の解説をします。
//}

#@#//makechaptitlepage[toc=on]


== あらすじ

突然暴走したロボットに襲われるりんね。どうやらシステムにはAIが搭載されているものの、どうやら正しく制御が出来ていないようだった。
どうやらその原因は、課長が入力した学習データにあるらしい。果たしてりんねと課長は正しいデータを準備し、AIを再学習させることができるのか？

//talklist{
//talk[rinne1][][AIとデータってやっぱり切り離せないんですね～]
//talk[kacho1][][俺は生きる！生きてデータと添い遂げる！]
//talk[rinne2][][AIナーーーーー!!]
//}

//clearpage

== 機械学習工学について
機械学習工学は、機械学習を実際のシステムに組み込むための技術や手法を元にした学問体系であり、バイブルである○○社「機械学習工学」では、
機械学習の本質的な問いを以下のように定義しています。

//list[][]{
機械学習技術を用いて構築したソフトウェア，そしてそれを中心としたシステムにより，どれだけの価値創造・課題解決が可能ができるか

そのシステムの開発や運用において，品質や効率をどのように高めていくか
//}

つまり、機械学習のある特定のモデルの性能の枠を超えて、産業として活用する場合のうまいやり方を考えることだと解釈しています。
今までのソフトウェア開発アプローチでは、ソースコードが全て、つまり人間がソフトウェアの挙動を定義するのに対して、機械学習の場合は、モデル・データが挙動の定義に重要な役割を果たします。
機械学習工学では、その機械学習特有の概念である「モデル」「データ」に関する方法論も取り扱います。

また、機械学習工学が取り扱う範囲は以下の領域も含まれます
: AIの倫理
    ほげほげ
: 機械学習における知財・契約
    ふがふが

=== データのアノテーションオチの解説

//image[3-9][冒頭と同じメッセージを送るロボット]

今回の話では、

=== IaCの嬉しさ
//image[2-7][とても長い手順書]
IaCの嬉しさは、インフラの構成をコードとして管理できることです。これにより、インフラの構成や設定をプログラムとして記述し、バージョン管理や自動化が可能になります。
例えば、本番環境と開発環境を同じ構成で作成したい場合、IaCを使うことで、同じコードを実行するだけで簡単に環境を再現できます。
また、削除も一括で行うことができ、不要なリソースを漏れなくにクリーンアップできます。

=== IaCのデメリット
IaCのデメリットはどうしても手間がかかることです。
IaCを使うためには、まずはコードを書く必要があり、記述方法に習熟する必要があります。
また、IaCを使うことによりクラウドの利用により実現したい、迅速なリソースの立ち上げが実現できなくなる場合があります。
その場合は、技術検証（PoC）の場合には、IaCを使わずに、手動でリソースを立ち上げることもあります。

//talklist{
//talk[rinne1][][そうするとまた、リソースの消し忘れが起きちゃうんじゃ...]
//talk[kami1][][だから、IaCだけが解決策じゃないってことね]
//talk[rinne1][][どうすればいいんですか？]
//talk[kami2][][コストのアラートだったり、自動停止の設定だったり色々やれることはあるわね]
//talk[rinne1][][なるほど、調べてみます！]
//}

=== クラウドの消し忘れ・コスト増を防ぐために

//table[cloud-cost-management][クラウドコスト管理機能比較]{
サービス種別	AWS	Azure	GCP	説明
----------------------------------------------------------------------
コスト監視	AWS Budgets	Cost Management	Cloud Billing	予算設定や使用状況の可視化が可能
コスト分析	Cost Explorer	Cost Analysis	Billing Reports	コスト傾向の分析と将来予測
自動停止	Lambda + CloudWatch	Automation Runbooks	Cloud Scheduler	未使用リソースの自動停止
//}

クラウドコストを効果的に管理するには、上記のような機能を活用することが重要です。特に以下の対策が有効です：

1. 予算アラートの設定：一定のコスト閾値に達した場合に通知
2. タグ付け戦略：部門・プロジェクト別コスト管理
3. 自動シャットダウン：開発環境の夜間・週末停止
4. 定期的なコスト分析：不要リソースの特定と削除

IaCと組み合わせることで、リソースのライフサイクル管理とコスト最適化を両立できます。

== その他関連情報
今回のストーリーで取り扱ったトピックについて解説します。

=== kusodeka_gpu_sugugesu_fastとは
//image[2-2][kusodeka_gpu_sugugesu_fast]


@<strong>{A. エンジニア特有の誇張表現です。}

//list[][]{
kusodeka_gpu = 性能が高いGPUが乗っているクラウドリソースで
sugugesu_fast = 値段も高いからすぐ消さないとヤバい
//}

クラウドサービスはリソースを使った時間だけ課金がされます。また、基本的に性能が高ければ高いほど時間当たりの料金は高くなります。GPU付きのコンピューティングインスタンスは高額なリソースの最たる例です。

//list[][]{
ex: AWS p5.48xlargeの場合
- NVIDIA H100 GPUを8基搭載
- 1時間あたり約 $123.20 USD（約 ¥18,000〜¥19,000, 東京リージョンでのオンデマンド料金）
//}

//clearpage

=== クラウドと円安について
//image[2-3][円安の影響を受けるクラウド料金][scale=0.7]

海外のクラウドサービスを利用する場合、料金はドル建てで請求されます。日本円に換算すると、円安の影響を受けるため、円安が進むとクラウドサービスの料金も高くなります。

劇中では、冒頭では1ドル100円で計算していました。調べたところ最後に1ドル100円だったのは2013年らしいです。
あくまでこの話は計算を分かりやすくするため現実世界と一致はしていません。一週間で1ドル100円から150円になったら日本経済壊れる。

=== ゲームキューブみたいなロゴ
Terraformのロゴを見てゲームキューブを思い出すのは私だけですか？

//image[2-6][ゲームキューブみたいなロゴ][scale=0.7]


=== お金をくれるおじさん
//image[2-4][お金をくれるおじさん][scale=0.7]
カ〇ジのパロディです。