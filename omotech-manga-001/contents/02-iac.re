= IaC (Infrastructure as Code)

//abstract{
第2章では「IaC (Infrastructure as Code)」を題材にしています。
第1章では「クラウドサービス」を題材にしていますが、その発展形としてインフラ構成をコードで管理する = Infrastructure as Code (IaC) という考え方があります。
今回の解説では、IaCを中心に、クラウド活用時のよくある誤りや運用イメージについての解説を行います。
//}

#@#//makechaptitlepage[toc=on]


== あらすじ

ある日いつも通りにクラウドを使用していたりんねと課長だが、突然インフラ費用の高額請求が届いてしまう。
どうやら、クラウド上の高額リソースを消し忘れてしまったらしい。
2人は危険なギャンブルで取り戻そうとするが、上手くいかずまたりんねは天界へ行ってしまうのだった。
果たしてIaCを駆使して、いい感じのインフラを構築することはできるのでしょうか？

//talklist{
//talk[kacho1][][インフラとコードって関係あるのかな？]
//talk[rinne1][][記法は独特ですけど、ちゃんとコードで表現できるみたいですよ！]
//talk[kacho1][][コードを見ると確かにそれっぽい！]
//}

//clearpage

//list[][Terraformのコード例]{
provider "aws" {
  region = "ap-northeast-1"
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "a" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.1.0/24"
}

resource "aws_instance" "web" {
  ami           = var.ami
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.a.id
}
//}

== IaCについて
IaCは○○年に登場した技術で、Infrastructure as Codeの略です。
IaCは、インフラをコードで管理することを指します。コードを実行すると、インフラが自動で構築されます。内部的にはコードを実行環境が解釈して、インフラを構築するためのAPIを呼び出す仕組みになっています。

=== IaCの嬉しさ
//image[2-7][とても長い手順書]
IaCの嬉しさは、インフラの構成をコードとして管理できることです。これにより、インフラの構成や設定をプログラムとして記述し、バージョン管理や自動化が可能になります。
例えば、本番環境と開発環境を同じ構成で作成したい場合、IaCを使うことで、同じコードを実行するだけで簡単に環境を再現できます。
また、削除も一括で行うことができ、不要なリソースを漏れなくにクリーンアップできます。

=== IaCのデメリット
IaCのデメリットはどうしても手間がかかることです。
IaCを使うためには、まずはコードを書く必要があり、記述方法に習熟する必要があります。
また、IaCを使うことによりクラウドの利用により実現したい、迅速なリソースの立ち上げが実現できなくなる場合があります。
その場合は、技術検証（PoC）の場合には、IaCを使わずに、手動でリソースを立ち上げることもあります。

//talklist{
//talk[rinne1][][そうするとまた、リソースの消し忘れが起きちゃうんじゃ...]
//talk[kami1][][だから、IaCだけが解決策じゃないってことね]
//talk[rinne1][][どうすればいいんですか？]
//talk[kami2][][コストのアラートだったり、自動停止の設定だったり色々やれることはあるわね]
//talk[rinne1][][なるほど、調べてみます！]
//}

=== クラウドの消し忘れ・コスト増を防ぐために

//table[cloud-cost-management][クラウドコスト管理機能比較]{
サービス種別	AWS	Azure	GCP	説明
----------------------------------------------------------------------
コスト監視	AWS Budgets	Cost Management	Cloud Billing	予算設定や使用状況の可視化が可能
コスト分析	Cost Explorer	Cost Analysis	Billing Reports	コスト傾向の分析と将来予測
自動停止	Lambda + CloudWatch	Automation Runbooks	Cloud Scheduler	未使用リソースの自動停止
//}

クラウドコストを効果的に管理するには、上記のような機能を活用することが重要です。特に以下の対策が有効です：

1. 予算アラートの設定：一定のコスト閾値に達した場合に通知
2. タグ付け戦略：部門・プロジェクト別コスト管理
3. 自動シャットダウン：開発環境の夜間・週末停止
4. 定期的なコスト分析：不要リソースの特定と削除

IaCと組み合わせることで、リソースのライフサイクル管理とコスト最適化を両立できます。

== その他関連情報
今回のストーリーで取り扱ったトピックについて解説します。

=== kusodeka_gpu_sugugesu_fastとは
//image[2-2][kusodeka_gpu_sugugesu_fast]


@<strong>{A. エンジニア特有の誇張表現です。}

//list[][]{
kusodeka_gpu = 性能が高いGPUが乗っているクラウドリソースで
sugugesu_fast = 値段も高いからすぐ消さないとヤバい
//}

クラウドサービスはリソースを使った時間だけ課金がされます。また、基本的に性能が高ければ高いほど時間当たりの料金は高くなります。GPU付きのコンピューティングインスタンスは高額なリソースの最たる例です。

//list[][]{
ex: AWS p5.48xlargeの場合
- NVIDIA H100 GPUを8基搭載
- 1時間あたり約 $123.20 USD（約 ¥18,000〜¥19,000, 東京リージョンでのオンデマンド料金）
//}

//clearpage

=== クラウドと円安について
//image[2-3][円安の影響を受けるクラウド料金][scale=0.7]

海外のクラウドサービスを利用する場合、料金はドル建てで請求されます。日本円に換算すると、円安の影響を受けるため、円安が進むとクラウドサービスの料金も高くなります。

劇中では、冒頭では1ドル100円で計算していました。調べたところ最後に1ドル100円だったのは2013年らしいです。
あくまでこの話は計算を分かりやすくするため現実世界と一致はしていません。一週間で1ドル100円から150円になったら日本経済壊れる。

=== ゲームキューブみたいなロゴ
Terraformのロゴを見てゲームキューブを思い出すのは私だけですか？

//image[2-6][ゲームキューブみたいなロゴ][scale=0.7]


=== お金をくれるおじさん
//image[2-4][お金をくれるおじさん][scale=0.7]
カ〇ジのパロディです。